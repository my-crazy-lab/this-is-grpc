// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/auth/auth.proto

package auth

import (
	context "context"
	order "github.com/my-crazy-lab/this-is-grpc/proto-module/proto/order"
	product "github.com/my-crazy-lab/this-is-grpc/proto-module/proto/product"
	user "github.com/my-crazy-lab/this-is-grpc/proto-module/proto/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*user.User, error)
	CreateProduct(ctx context.Context, in *product.CreateProductRequest, opts ...grpc.CallOption) (*product.CreateProductResponse, error)
	CreateCategories(ctx context.Context, in *product.CreateCategoriesRequest, opts ...grpc.CallOption) (*product.CreateCategoriesResponse, error)
	GetCategories(ctx context.Context, in *product.GetCategoriesRequest, opts ...grpc.CallOption) (*product.GetCategoriesResponse, error)
	GetProducts(ctx context.Context, in *product.GetProductsRequest, opts ...grpc.CallOption) (*product.GetProductsResponse, error)
	CreateReview(ctx context.Context, in *product.CreateReviewRequest, opts ...grpc.CallOption) (*product.CreateReviewResponse, error)
	GetReviews(ctx context.Context, in *product.GetReviewsRequest, opts ...grpc.CallOption) (*product.GetReviewsResponse, error)
	GetProduct(ctx context.Context, in *product.GetProductRequest, opts ...grpc.CallOption) (*product.ProductItem, error)
	UpdateInventory(ctx context.Context, in *product.UpdateInventoryRequest, opts ...grpc.CallOption) (*product.UpdateInventoryResponse, error)
	AddToCart(ctx context.Context, in *order.AddToCartRequest, opts ...grpc.CallOption) (*order.AddToCartResponse, error)
	ViewCart(ctx context.Context, in *order.ViewCartRequest, opts ...grpc.CallOption) (*order.ViewCartResponse, error)
	PlaceOrder(ctx context.Context, in *order.PlaceOrderRequest, opts ...grpc.CallOption) (*order.PlaceOrderResponse, error)
	UpdateOrderStatus(ctx context.Context, in *order.UpdateOrderStatusRequest, opts ...grpc.CallOption) (*order.UpdateOrderStatusResponse, error)
	CancelOrder(ctx context.Context, in *order.CancelOrderRequest, opts ...grpc.CallOption) (*order.CancelOrderResponse, error)
	GetOrder(ctx context.Context, in *order.GetOrderRequest, opts ...grpc.CallOption) (*order.Order, error)
	CreateShipping(ctx context.Context, in *order.CreateShippingRequest, opts ...grpc.CallOption) (*order.CreateShippingResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*user.User, error) {
	out := new(user.User)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateProduct(ctx context.Context, in *product.CreateProductRequest, opts ...grpc.CallOption) (*product.CreateProductResponse, error) {
	out := new(product.CreateProductResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateCategories(ctx context.Context, in *product.CreateCategoriesRequest, opts ...grpc.CallOption) (*product.CreateCategoriesResponse, error) {
	out := new(product.CreateCategoriesResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/CreateCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetCategories(ctx context.Context, in *product.GetCategoriesRequest, opts ...grpc.CallOption) (*product.GetCategoriesResponse, error) {
	out := new(product.GetCategoriesResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetProducts(ctx context.Context, in *product.GetProductsRequest, opts ...grpc.CallOption) (*product.GetProductsResponse, error) {
	out := new(product.GetProductsResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateReview(ctx context.Context, in *product.CreateReviewRequest, opts ...grpc.CallOption) (*product.CreateReviewResponse, error) {
	out := new(product.CreateReviewResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetReviews(ctx context.Context, in *product.GetReviewsRequest, opts ...grpc.CallOption) (*product.GetReviewsResponse, error) {
	out := new(product.GetReviewsResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetProduct(ctx context.Context, in *product.GetProductRequest, opts ...grpc.CallOption) (*product.ProductItem, error) {
	out := new(product.ProductItem)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateInventory(ctx context.Context, in *product.UpdateInventoryRequest, opts ...grpc.CallOption) (*product.UpdateInventoryResponse, error) {
	out := new(product.UpdateInventoryResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/UpdateInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddToCart(ctx context.Context, in *order.AddToCartRequest, opts ...grpc.CallOption) (*order.AddToCartResponse, error) {
	out := new(order.AddToCartResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ViewCart(ctx context.Context, in *order.ViewCartRequest, opts ...grpc.CallOption) (*order.ViewCartResponse, error) {
	out := new(order.ViewCartResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/ViewCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PlaceOrder(ctx context.Context, in *order.PlaceOrderRequest, opts ...grpc.CallOption) (*order.PlaceOrderResponse, error) {
	out := new(order.PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateOrderStatus(ctx context.Context, in *order.UpdateOrderStatusRequest, opts ...grpc.CallOption) (*order.UpdateOrderStatusResponse, error) {
	out := new(order.UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/UpdateOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CancelOrder(ctx context.Context, in *order.CancelOrderRequest, opts ...grpc.CallOption) (*order.CancelOrderResponse, error) {
	out := new(order.CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetOrder(ctx context.Context, in *order.GetOrderRequest, opts ...grpc.CallOption) (*order.Order, error) {
	out := new(order.Order)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateShipping(ctx context.Context, in *order.CreateShippingRequest, opts ...grpc.CallOption) (*order.CreateShippingResponse, error) {
	out := new(order.CreateShippingResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/CreateShipping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*user.User, error)
	CreateProduct(context.Context, *product.CreateProductRequest) (*product.CreateProductResponse, error)
	CreateCategories(context.Context, *product.CreateCategoriesRequest) (*product.CreateCategoriesResponse, error)
	GetCategories(context.Context, *product.GetCategoriesRequest) (*product.GetCategoriesResponse, error)
	GetProducts(context.Context, *product.GetProductsRequest) (*product.GetProductsResponse, error)
	CreateReview(context.Context, *product.CreateReviewRequest) (*product.CreateReviewResponse, error)
	GetReviews(context.Context, *product.GetReviewsRequest) (*product.GetReviewsResponse, error)
	GetProduct(context.Context, *product.GetProductRequest) (*product.ProductItem, error)
	UpdateInventory(context.Context, *product.UpdateInventoryRequest) (*product.UpdateInventoryResponse, error)
	AddToCart(context.Context, *order.AddToCartRequest) (*order.AddToCartResponse, error)
	ViewCart(context.Context, *order.ViewCartRequest) (*order.ViewCartResponse, error)
	PlaceOrder(context.Context, *order.PlaceOrderRequest) (*order.PlaceOrderResponse, error)
	UpdateOrderStatus(context.Context, *order.UpdateOrderStatusRequest) (*order.UpdateOrderStatusResponse, error)
	CancelOrder(context.Context, *order.CancelOrderRequest) (*order.CancelOrderResponse, error)
	GetOrder(context.Context, *order.GetOrderRequest) (*order.Order, error)
	CreateShipping(context.Context, *order.CreateShippingRequest) (*order.CreateShippingResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAuthServer) GetUser(context.Context, *GetUserRequest) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServer) CreateProduct(context.Context, *product.CreateProductRequest) (*product.CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedAuthServer) CreateCategories(context.Context, *product.CreateCategoriesRequest) (*product.CreateCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategories not implemented")
}
func (UnimplementedAuthServer) GetCategories(context.Context, *product.GetCategoriesRequest) (*product.GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedAuthServer) GetProducts(context.Context, *product.GetProductsRequest) (*product.GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedAuthServer) CreateReview(context.Context, *product.CreateReviewRequest) (*product.CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedAuthServer) GetReviews(context.Context, *product.GetReviewsRequest) (*product.GetReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedAuthServer) GetProduct(context.Context, *product.GetProductRequest) (*product.ProductItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedAuthServer) UpdateInventory(context.Context, *product.UpdateInventoryRequest) (*product.UpdateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventory not implemented")
}
func (UnimplementedAuthServer) AddToCart(context.Context, *order.AddToCartRequest) (*order.AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedAuthServer) ViewCart(context.Context, *order.ViewCartRequest) (*order.ViewCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCart not implemented")
}
func (UnimplementedAuthServer) PlaceOrder(context.Context, *order.PlaceOrderRequest) (*order.PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedAuthServer) UpdateOrderStatus(context.Context, *order.UpdateOrderStatusRequest) (*order.UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedAuthServer) CancelOrder(context.Context, *order.CancelOrderRequest) (*order.CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedAuthServer) GetOrder(context.Context, *order.GetOrderRequest) (*order.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedAuthServer) CreateShipping(context.Context, *order.CreateShippingRequest) (*order.CreateShippingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipping not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateProduct(ctx, req.(*product.CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.CreateCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreateCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateCategories(ctx, req.(*product.CreateCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetCategories(ctx, req.(*product.GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetProducts(ctx, req.(*product.GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateReview(ctx, req.(*product.CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetReviews(ctx, req.(*product.GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetProduct(ctx, req.(*product.GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(product.UpdateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/UpdateInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateInventory(ctx, req.(*product.UpdateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddToCart(ctx, req.(*order.AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ViewCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.ViewCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ViewCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/ViewCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ViewCart(ctx, req.(*order.ViewCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PlaceOrder(ctx, req.(*order.PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/UpdateOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateOrderStatus(ctx, req.(*order.UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CancelOrder(ctx, req.(*order.CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetOrder(ctx, req.(*order.GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order.CreateShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreateShipping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateShipping(ctx, req.(*order.CreateShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Auth_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Auth_GetUser_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Auth_CreateProduct_Handler,
		},
		{
			MethodName: "CreateCategories",
			Handler:    _Auth_CreateCategories_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _Auth_GetCategories_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Auth_GetProducts_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _Auth_CreateReview_Handler,
		},
		{
			MethodName: "GetReviews",
			Handler:    _Auth_GetReviews_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Auth_GetProduct_Handler,
		},
		{
			MethodName: "UpdateInventory",
			Handler:    _Auth_UpdateInventory_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _Auth_AddToCart_Handler,
		},
		{
			MethodName: "ViewCart",
			Handler:    _Auth_ViewCart_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _Auth_PlaceOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _Auth_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Auth_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Auth_GetOrder_Handler,
		},
		{
			MethodName: "CreateShipping",
			Handler:    _Auth_CreateShipping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/auth.proto",
}
